import { getKv } from "../botStatic/kvClient.ts";

export interface Task {
  taskText: string;
  taskStatus: boolean;
  id: string;
}

export async function addTask(taskText: string): Promise<void> {
  const kv = await getKv();
  const taskId = `task_${Date.now()}`;
  const task: Task = {
    taskText,
    taskStatus: false,
    id: taskId,
  };
  await kv.set(["reltubBot", "tasks", taskId], task);
  console.log("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞");
}

export async function deleteTaskById(taskId: string): Promise<void> {
  const kv = await getKv();
  await kv.delete(["reltubBot", "tasks", taskId]);
  console.log("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
}

export async function toggleTaskStatusById(taskId: string): Promise<void> {
  const kv = await getKv();
  const task = await kv.get<Task>(["reltubBot", "tasks", taskId]);

  if (task.value) {
    const updatedTask: Task = {
      ...task.value,
      taskStatus: !task.value.taskStatus,
    };
    await kv.set(["reltubBot", "tasks", taskId], updatedTask);
    console.log("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
  } else {
    console.log("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
  }
}

async function getCastleTasks(): Promise<Task[]> {
  const kv = await getKv();
  const tasks: Task[] = [];
  const iterator = kv.list<Task>({ prefix: ["reltubBot", "tasks"] });

  for await (const entry of iterator) {
    tasks.push(entry.value);
  }

  return tasks;
}

export async function transferTaskStatus(): Promise<Task[]> {
  return await getCastleTasks();
}

export async function transferTaskStatusForView(): Promise<string> {
  const tasks = await getCastleTasks();
  if (tasks.length === 0) {
    return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á";
  }

  const checkMark = "‚úÖ";
  const crossMark = "üî≤";

  return tasks
    .map((task) =>
      `${task.taskText} ${task.taskStatus ? checkMark : crossMark}`
    )
    .join("\n");
}
