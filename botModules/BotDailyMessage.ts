import { Bot } from "@grammyjs/bot";
import { IDESOS_GROUP_ID } from "../botStatic/constance.ts";
import { MyContext } from "../bot.ts";
import { formatWeatherMessage, getWeather } from "../NewWeather.ts";
import { yerevanToUTC } from "../helpers.ts";
import { getCalendarEventsForNext24Hours } from "../googleCalendar/calendarSevice.ts";
import { CASTLE_PUBLIC_CALENDAR_ID } from "../botStatic/constance.ts";
import { formatCalendarEvents } from "../googleCalendar/formatCalendarEvents.ts";
import { getKv } from "../botStatic/kvClient.ts";

const targetHour = await yerevanToUTC(23);
const reminderHour = await yerevanToUTC(22);
const reminderMinute = 50;

export async function botDailyMessage(bot: Bot<MyContext>) {
  // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞ 22:50
  Deno.cron("getEvents", `${reminderMinute} ${reminderHour} * * *`, async () => {
    try {
      const kv = await getKv();
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
      const lock = await kv.atomic()
        .check({ key: ["reltubBot", "dailyMessage_lock"], versionstamp: null })
        .set(["reltubBot", "dailyMessage_lock"], true, { expireIn: 5 * 60 * 1000 }) // 5 –º–∏–Ω—É—Ç
        .commit();

      if (!lock.ok) {
        console.log("–î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ");
        return;
      }

      const events = await getCalendarEventsForNext24Hours(CASTLE_PUBLIC_CALENDAR_ID);
      const weatherData = await getWeather();
      const weatherMessage = weatherData ? formatWeatherMessage(weatherData) : "Weather data unavailable";
      const eventsMessage = formatCalendarEvents(events);

      const dailyMessage = `–•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞! ü§ó

${weatherMessage}

${eventsMessage}`;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ KV –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ 23:00
      await kv.set(["reltubBot", "dailyMessage"], dailyMessage);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 23:00
  Deno.cron("dailyMessage", `0 ${targetHour} * * *`, async () => {
    try {
      const kv = await getKv();
      const lock = await kv.atomic()
        .check({ key: ["reltubBot", "send_lock"], versionstamp: null })
        .set(["reltubBot", "send_lock"], true, { expireIn: 5 * 60 * 1000 })
        .commit();

      if (!lock.ok) {
        console.log("–î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ");
        return;
      }

      const messageEntry = await kv.get<string>(["reltubBot", "dailyMessage"]);
      const message = messageEntry.value || "–í—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞! ü§ó";

      try {
        await bot.api.sendMessage(IDESOS_GROUP_ID, message);
        console.log("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
      } finally {
        // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await kv.delete(["reltubBot", "dailyMessage"]);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
  });
}
